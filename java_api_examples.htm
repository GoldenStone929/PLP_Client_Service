<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
<title>Java Client SDK Examples</title>
<link rel="stylesheet" href="/help/docs/ppilot.css" type="text/css">
</head>
	<body>
		<h1>Java Client SDK Examples</h1>
		<p>Java is a popular programming language for running distributed applications via 
			web services. This worked example illustrates how to run a  
			protocol from a Java program. The specific example shows you how to run a protocol 
			synchronously&#8212;control returns to the example program only when the 
			protocol has run to completion. An asynchronous example is 
			included at the end.		</p>
		<div class="tip">
			<p><strong>Tips:</strong>
			</p>
			<ul>
				<li>
					The source code for these examples is available in the Java
					  Client SDK package  &quot;&lt;install&gt;/apps/scitegic/clientsdkjava/web/examples&quot;.
				<li>
				To work with these examples, you need to be proficient in Java programming and 
				understand the basic concepts of Web services.
				<li>
					In future releases, we may make enhancements to the SDK between
					  versions that  could break applications that call it. When
					  you upgrade, review the release notes for details.
				</li>
			</ul>
		</div>
		<h2>Overview</h2>
		<p>The worked example covers the following steps.</p>
		<ul>
			<li>
			Importing Java libraries
			<li>
			Connecting to the Pipeline Pilot server
			<li>
			Checking the server configuration
			<li>
			Creating a protocol job
			<li>
			Adding parameters
			<li>
			Running the job
			<li>
			Processing the results
			<li>
			Deleting the job data from the server
			<li>
				Compiling and running the example</li>
		</ul>
		<h2>Importing Java Libraries</h2>
		<p>All SciTegic classes needed are in the com.scitegic.proxy package. You can import the
		entire package or just the classes you need.
			In addition, the following example uses the standard Java File class:</p>
		<pre class="syntax">
import com.scitegic.proxy.*;

import java.io.File;
</pre>
		<h2>Connecting to the Server</h2>
		<p>A Pipeline Pilot server URL, username, and password are necessary to connect to 
			the server. The format of the  server URL is "http://&lt;yourhost.yourdomain.com&gt;:9944". 

			For a secure connection, use HTTPS and port number 9943. Change the
			URL to the appropriate value for your local  configuration. The following
	example shows getting these values from the command line:</p>
		<pre class="syntax">
public static void main(String[] args) {

    // Pick up the server URL, username, and password from the command line
    if (args.length &lt; 3) {
        System.out.println("Usage: java com.scitegic.proxy.examples.SimpleSynchronousRun &lt;server_url> &lt;username> &lt;password>");
        return;
    }

    String server = args[0];
    String user = args[1];
    String password = args[2];
</pre>
		<p>The <code>PipelinePilotServer</code> constructor takes the server, username, and 
			password as arguments. Create the <code>PipelinePilotServer</code> and <code>Job</code> objects outside
			the try block to allow clean up from an <code>Exception</code>:</p>
		<pre class="syntax">
PipelinePilotServer pp = null;
Job protocol = null;

try {
    pp = new PipelinePilotServer(server, user, password);
</pre>

<h2>Checking the Server Configuration</h2>
<p>To get the server configuration use getServerConfig():</p>
<pre class="syntax">
// Print server configuration settings.
PipelinePilotServerConfig conf = pp.getServerConfig();
System.out.println("Printing server configuration settings");
System.out.println("  Local root = " + conf.getLocalRoot());
System.out.println("  Local temp root = " + conf.getLocalTempRoot());
System.out.println("  File Web Service Endpoint = " + conf.getSciTegicFileEndPoint());
System.out.println("  Server version = " + conf.getServerVersion());
System.out.println("  Authentication on = " + conf.isAuthenticationOn());
System.out.println();
System.out.println("Printing SciTegic Root of server");
String root = pp.getRemoteFileManager().getSciTegicRoot();
System.out.println("  SciTegic Root = " + root);
System.out.println();
</pre>

<h2>Checking the Protocol Database</h2>
<p>Now that the server connection exists, components and protocols are accessible. To get to the
component database, use getComponentDatabase(). Here, a list of example protocols is
printed:</p>
<pre class="syntax">
ComponentDatabase compdb = pp.getComponentDatabase();

// Print contents of 'Protocols/Examples'
System.out.println("Printing folder names under " + EXAMPLE_PROTOCOLS);
String[] list = compdb.getFolderNamesInFolder(EXAMPLE_PROTOCOLS);
for (int i = 0; i &lt; list.length; i++) {
	System.out.println(list[i]);
}
</pre>

<p>Here, a tree of protocols is fetched and printed (see the full source code below for the
helper method that prints the tree):</p>

<pre class="syntax">
// Print out folder hierarchy under 'Protocols/Web Services/Web Port Examples'.
System.out.println("Printing folder tree under " + WEB_PORT_EXAMPLE_PROTOCOLS
		+ " (omitting Utilities directories)");
XmldbItem rootFolder = compdb.getXmldbContentsRecursive(WEB_PORT_EXAMPLE_PROTOCOLS);
printFolderTreeRecursive(rootFolder, 0);
</pre>

		<h2>Creating a Protocol Job</h2>
		<p>Creating the protocol job is straightforward. In the following example,
		  the protocol name was set in a class variable:</p>
		<pre class="syntax">
static final String PROTOCOL = "Protocols/Web Services/Web Port Examples/Generic/XY Scatter Plot Utility";

protocol = pp.createJob(PROTOCOL);
</pre>
		<h2>Adding Parameters</h2>
		<p>The XY Scatter Plot Utility takes a Source, an X Property, a Y Property,
		  a Tooltip and a File Type. To ensure that all
			parameter are set and the protocol is ready to run, use <code>validate()</code>:</p>
		<pre class="syntax">
boolean uploadFromClient = true;
if (uploadFromClient) {
    // Use setInputFileOnClient() to upload a local file to the server.
    File localFile = new File("./data/imports-85.txt");
    protocol.setInputFileOnClient("Source", localFile);
} else {
    // Alternatively, read a file on the server.
    protocol.setInputValue("Source", "data/Tables/imports-85.txt");
}

protocol.setInputValue("X Property", "Highwaympg");
protocol.setInputValue("Y Property", "Horsepower");
protocol.setInputValue("Tooltip",
        "'Make = ' . (make) . ', $(X Property) = ' . ($(X Property)) . ', "
                + "$(Y Property) = ' . ($(Y Property))");
protocol.setInputValue("File Type", "PDF");
protocol.validate();
</pre>
		<h2>Running the Job</h2>
		<p>A single method call starts the job and polls for completion. Control returns
		  to  the calling program when the job is complete: </p>
		<pre class="syntax">
JobResult prr = protocol.runAndPoll();
</pre>
		<h2>Processing the Results</h2>
		<p>Once the protocol is finished, the results are immediately available. Use <code>getResultFiles()</code>:</p>
		<pre class="syntax">
String[] results = prr.getResultFiles();

if (results.length &gt; 0) {
    // print all result files
    System.out.println("Getting job results:");
    for (int i = 0; i &lt; results.length; i++) {
        System.out.println(results[i]);
    }
    System.out.println();

    // download, locally, the first result file
    File localResultFile = new File("chart.pdf");
    System.out.print("Writing result file to ");
    System.out.println(localResultFile.getAbsolutePath());
    System.out.println();

    pp.getRemoteFileManager().downloadFile(results[0], localResultFile);
}
</pre>
		<h2>Deleting the Job</h2>
		<p>To avoid cluttering up the server with every job that runs, each set of
		  job data needs to be deleted after any useful results are extracted
		  or reviewed:</p>
		<pre class="syntax">
// Remove the job from the server
System.out.println("Deleting job " + protocol.getJobId());
pp.releaseJob(protocol.getJobId());        
</pre>
		<h2>The Complete Example</h2>
		<p>Here is the complete example:</p>
		<pre class="syntax">
package com.scitegic.proxy.examples;

import java.io.File;

import com.scitegic.proxy.ComponentDatabase;
import com.scitegic.proxy.Job;
import com.scitegic.proxy.JobResult;
import com.scitegic.proxy.JobStatus;
import com.scitegic.proxy.PipelinePilotServer;
import com.scitegic.proxy.PipelinePilotServerConfig;
import com.scitegic.proxy.XmldbItem;

/**
 * This sample Java client illustrates how to use the 'Java Client SDK for Server' to launch Protocol Jobs, Synchronously, on a Server
 */
public class SimpleSynchronousRun {

	static final String EXAMPLE_PROTOCOLS = "Protocols/Examples";
	static final String WEB_PORT_EXAMPLE_PROTOCOLS = "Protocols/Web Services/Web Port Examples";
	static final String PROTOCOL = WEB_PORT_EXAMPLE_PROTOCOLS + "/Generic/XY Scatter Plot Utility";
	static final String WHITESPACE = "                                                     ";


	public SimpleSynchronousRun() {
	}


	private static void printFolderTreeRecursive(XmldbItem folder, int indent) {
		if (folder.getName().toLowerCase().equals("utilities")) {
			return;
		}
		System.out.println(WHITESPACE.substring(0, indent) + folder.getName());
		indent += 2;
		XmldbItem[] children = folder.getChildren();
		for (int i = 0, m = children.length; i &lt; m; i++) {
			XmldbItem child = children[i];
			if (child.isFolder()) {
				printFolderTreeRecursive(child, indent);
			} else {
				System.out.println(WHITESPACE.substring(0, indent) + child.getName());
			}
		}
	}


	public static void main(String[] args) {
		// Pick up the server URL, username, and password from the command line
		if (args.length &lt; 3) {
			System.out.println("Usage: java com.scitegic.proxy.examples.SimpleSynchronousRun "
					+ "&lt;server_url&gt; &lt;username&gt; &lt;password&gt;");
			return;
		}

		String server = args[0];
		String user = args[1];
		String password = args[2];

		PipelinePilotServer pp = null;
		Job protocol = null;

		try {
			pp = new PipelinePilotServer(server, user, password);

			// Print server configuration settings.
			PipelinePilotServerConfig conf = pp.getServerConfig();
			System.out.println("Printing server configuration settings");
			System.out.println("  Local root = " + conf.getLocalRoot());
			System.out.println("  Local temp root = " + conf.getLocalTempRoot());
			System.out.println("  File Web Service Endpoint = " + conf.getSciTegicFileEndPoint());
			System.out.println("  Server version = " + conf.getServerVersion());
			System.out.println("  Authentication on = " + conf.isAuthenticationOn());
			System.out.println();
			System.out.println("Printing SciTegic Root of server");
			String root = pp.getRemoteFileManager().getSciTegicRoot();
			System.out.println("  SciTegic Root = " + root);
			System.out.println();

			ComponentDatabase compdb = pp.getComponentDatabase();

			// Print contents of 'Protocols/Examples'
			System.out.println("Printing folder names under " + EXAMPLE_PROTOCOLS);
			String[] list = compdb.getFolderNamesInFolder(EXAMPLE_PROTOCOLS);
			for (int i = 0; i &lt; list.length; i++) {
				System.out.println(list[i]);
			}
			System.out.println();

			// Print out folder hierarchy under 'Protocols/Web Services/Web Port Examples'.
			System.out.println("Printing folder tree under " + WEB_PORT_EXAMPLE_PROTOCOLS
					+ " (omitting Utilities directories)");
			XmldbItem rootFolder = compdb.getXmldbContentsRecursive(WEB_PORT_EXAMPLE_PROTOCOLS);
			printFolderTreeRecursive(rootFolder, 0);
			System.out.println();

			// Create job and add parameters for protocol run
			protocol = pp.createJob(PROTOCOL);

			boolean uploadFromClient = true;
			if (uploadFromClient) {
				// Use setInputFileOnClient() to upload a local file to the server.
				File localFile = new File("./data/imports-85.txt");
				protocol.setInputFileOnClient("Source", localFile);
			} else {
				// Alternatively, read a file on the server.
				protocol.setInputValue("Source", "data/Tables/imports-85.txt");
			}

			protocol.setInputValue("X Property", "Highwaympg");
			protocol.setInputValue("Y Property", "Horsepower");
			protocol.setInputValue("Tooltip",
					"'Make = ' . (make) . ', $(X Property) = ' . ($(X Property)) . ', "
							+ "$(Y Property) = ' . ($(Y Property))");
			protocol.setInputValue("File Type", "PDF");
			protocol.validate();

			// Run job and check results
			System.out.println("Starting Protocol Job Synchronously");
			System.out.println();

			JobResult prr = protocol.runAndPoll();

			JobStatus status = protocol.getStatus();
			if (JobStatus.Finished.equals(status)) {
				String[] results = prr.getResultFiles();

				if (results.length &gt; 0) {
					// print all result files
					System.out.println("Getting job results:");
					for (int i = 0; i &lt; results.length; i++) {
						System.out.println(results[i]);
					}
					System.out.println();

					// download, locally, the first result file
					File localResultFile = new File("chart.pdf");
					System.out.print("Writing result file to ");
					System.out.println(localResultFile.getAbsolutePath());
					System.out.println();

					pp.getRemoteFileManager().downloadFile(results[0], localResultFile);
				}

				System.out.println("Job files will be deleted after you press &lt;Enter&gt;");
				System.out.print("&gt;&gt;&gt;&gt;");
				System.in.read();
			} else {
				System.out.println("Getting job errors results");

				String[] error = protocol.getErrorMessages();

				for (int i = 0; i &lt; error.length; i++) {
					System.out.println(error[i]);
				}
			}

			// Remove the job from the server
			System.out.println("Deleting job " + protocol.getJobId());
			pp.releaseJob(protocol.getJobId());
		} catch (Exception e) {
			if (pp != null &amp;&amp; protocol != null) {
				System.out.println("Deleting job " + protocol.getJobId());
				try {
					pp.releaseJob(protocol.getJobId());
				} catch (Exception ex) {
				}
			}
			e.printStackTrace();
		}
	}
}
</pre>
		<h2>Compiling and Running the Example</h2>
		<p>Copy SimpleSynchronousRun.java to a local src directory. 
			Since the Java class is in the com.scitegic.proxy.examples package,
		   the full path for the local copy of the Java file should be &quot;src/com/scitegic/proxy/examples/SimpleSynchronousRun.java&quot;.
		   Use the &quot;run.bat&quot; batch file to compile the example program. It 
			creates a class directory, sets the CLASSPATH, and 
			runs javac to compile the .java file and generate the 
			.class file. </p>
		<p>The CLASSPATH needs to include the class
		  directory and the following JAR files: </p>
		<p>jalpp.jar<br>
	    activation.jar<br>
	    jaxp-api.jar<br>
	    jax-qname.jar<br>
	    JaxRPC_PP_Stubs.jar<br>
	    jaxrpc-api.jar<br>
	    jaxrpc-impl.jar<br>
	    jaxrpc-spi.jar<br>
	    mail.jar<br>
	    relaxngDatatype.jar<br>
	    saaj-api.jar<br>
	    saaj-impl.jar<br>
	    xerces.jar<br>
	    xsdlib.jar</p>
		<pre class="syntax">
mkdir class

set CLASSPATH=class;lib/jalpp.jar;lib/activation.jar;lib/jaxp-api.jar;lib/jax-qname.jar;lib/JaxRPC_PP_Stubs.jar;lib/jaxrpc-api.jar;lib/jaxrpc-impl.jar;lib/jaxrpc-spi.jar;lib/mail.jar;lib/relaxngDatatype.jar;lib/saaj-api.jar;lib/saaj-impl.jar;lib/xerces.jar;lib/xsdlib.jar

javac -d class -classpath %CLASSPATH% src/com/scitegic/proxy/examples/*.java
</pre>
		<p>Now use the &quot;run.bat&quot; batch file to run the example program. The 
			batch file sets the CLASSPATH, and runs java to 
			execute the .class file. The CLASSPATH is the same as 
			the one used in the compile step. Remember to enter the Pipeline Pilot server  URL, the username, and the password on the command line.</p>
		<pre class="syntax">
set CLASSPATH=class;lib/jalpp.jar;lib/activation.jar;lib/jaxp-api.jar;lib/jax-qname.jar;lib/JaxRPC_PP_Stubs.jar;lib/jaxrpc-api.jar;lib/jaxrpc-impl.jar;lib/jaxrpc-spi.jar;lib/mail.jar;lib/relaxngDatatype.jar;lib/saaj-api.jar;lib/saaj-impl.jar;lib/xerces.jar;lib/xsdlib.jar

java -classpath %CLASSPATH% com.scitegic.proxy.examples.SimpleSynchronousRun %1 %2 %3
</pre>
		<p>With input values of &quot;http://localhost:9944&quot;, &quot;scitegicuser&quot;,
		   and &quot;scitegic&quot;, the example program produces the following output:</p>
		<pre class="syntax">
Printing server configuration settings
  Local root = C:/SesInstall/public
  Local temp root = C:/SesInstall/web/jobs
  File Web Service Endpoint = http://localhost:9944/scitegic/file
  Server version = 8.1.0.0
  Authentication on = false

Printing SciTegic Root of server
  SciTegic Root = C:/SesInstall/public

Printing folder names under Protocols/Examples
ADMET
Advanced Data Modeling
Chemistry
Data Modeling
Decision Trees
Gene Expression
Generic
Imaging
Integration
Next Gen Sequencing
Plate Data Analytics
R Statistics
Reporting
Sequence Analysis

Printing folder tree under Protocols/Web Services/Web Port Examples (omitting Utilities directories)
Protocols/Web Services/Web Port Examples
  Chemistry
    01 Simple Search
    02 Property Profiling
    03 ADMET Profiling
    04 Clustering Molecules
    05 Query by Form
    06 SAR Table
    07 Activity Modeling
  Generic
    Baseball Statistics
    PilotPoker
    Show Environment
    XY Scatter Plot Utility
  Sequence Analysis
    DAS Data Sources
      DAS Yeast Annotations
    01 Protein Summary (local)
    02 Protein Summary (internet)
    03 Protein Summary and Text Search
    List DAS Data Sources Protocols
    Protein BLAST Interface
    Sequence Analysis and Profile Search

Starting Protocol Job Synchronously

Getting job results:
http://localhost:9944/jobs/user/{jlpDAD4F-849E-4543-A41D-1D9B1268E70D}/Chart.pdf

Writing result file to C:\SesInstall\apps\scitegic\clientsdkjava\web\examples\chart.pdf

Job files will be deleted after you press &lt;Enter&gt;
&gt;&gt;&gt;&gt;
Deleting job {jlpDAD4F-849E-4543-A41D-1D9B1268E70D}
</pre>
		<h2>An Asynchronous Example</h2>
		<p>To run a protocol asynchronously, instead of synchronously, replace the <code>runAndPoll()</code> call
		  with the combination of <code>run()</code>, <code>getStatus()</code>, and <code>isExitStatus()</code>. The calling
		  program is now free to execute other Java code while waiting for the protocol
		  to complete, but it is the calling program's responsibility to manually poll
		  for the protocol's completion.</p>
		<p>Replace the following code in the synchronous example:</p>
<pre class="syntax">
JobResult prr = protocol.runAndPoll();

JobStatus status = protocol.getStatus();
</pre>
<p>with this:</p>
<pre class="syntax">
protocol.run();

System.out.println("Polling Job to see if it is finished...");
JobStatus status = protocol.getStatus();
System.out.println("Protocol Status is: " + status.toString());

while (!status.isExitStatus()) {
	Thread.sleep(2000);
	status = protocol.getStatus();
	System.out.println("Protocol Status is: " + status.toString());
}
</pre>
		<p>The rest of the code remains unchanged. Compile and run as before.</p>
		<p>&nbsp;</p>
	</body>
</html>
